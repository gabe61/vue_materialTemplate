{"remainingRequest":"D:\\Develop\\Vuejs\\vue-material-dashboard-v1.0.2\\node_modules\\babel-loader\\lib\\index.js!D:\\Develop\\Vuejs\\vue-material-dashboard-v1.0.2\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Develop\\Vuejs\\vue-material-dashboard-v1.0.2\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Develop\\Vuejs\\vue-material-dashboard-v1.0.2\\src\\components\\Cards\\ChartCard.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\Develop\\Vuejs\\vue-material-dashboard-v1.0.2\\src\\components\\Cards\\ChartCard.vue","mtime":1542768921345},{"path":"D:\\Develop\\Vuejs\\vue-material-dashboard-v1.0.2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Develop\\Vuejs\\vue-material-dashboard-v1.0.2\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\Develop\\Vuejs\\vue-material-dashboard-v1.0.2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Develop\\Vuejs\\vue-material-dashboard-v1.0.2\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"chart-card\",\n  props: {\n    footerText: {\n      type: String,\n      default: \"\"\n    },\n    headerTitle: {\n      type: String,\n      default: \"Chart title\"\n    },\n    chartType: {\n      type: String,\n      default: \"Line\" // Line | Pie | Bar\n\n    },\n    chartOptions: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    chartResponsiveOptions: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    chartData: {\n      type: Object,\n      default: function _default() {\n        return {\n          labels: [],\n          series: []\n        };\n      }\n    },\n    dataBackgroundColor: {\n      type: String,\n      default: \"green\"\n    }\n  },\n  data: function data() {\n    return {\n      chartId: \"no-id\"\n    };\n  },\n  methods: {\n    /***\n     * Initializes the chart by merging the chart options sent via props and the default chart options\n     */\n    initChart: function initChart() {\n      var chartIdQuery = \"#\".concat(this.chartId);\n      console.log('chartIdQuery', this.chartId, chartIdQuery, this);\n      this.$Chartist[this.chartType](chartIdQuery, this.chartData, this.chartOptions);\n    },\n\n    /***\n     * Assigns a random id to the chart\n     */\n    updateChartId: function updateChartId() {\n      var currentTime = new Date().getTime().toString();\n      var randomInt = this.getRandomInt(0, currentTime);\n      this.chartId = \"div_\".concat(randomInt);\n    },\n    getRandomInt: function getRandomInt(min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n  },\n  mounted: function mounted() {\n    this.updateChartId();\n    this.$nextTick(this.initChart);\n  }\n};",{"version":3,"sources":["ChartCard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAgBA,eAAA;AACA,QAAA,YADA;AAEA,SAAA;AACA,gBAAA;AACA,YAAA,MADA;AAEA,eAAA;AAFA,KADA;AAKA,iBAAA;AACA,YAAA,MADA;AAEA,eAAA;AAFA,KALA;AASA,eAAA;AACA,YAAA,MADA;AAEA,eAAA,MAFA,CAEA;;AAFA,KATA;AAaA,kBAAA;AACA,YAAA,MADA;AAEA,eAAA,oBAAA;AACA,eAAA,EAAA;AACA;AAJA,KAbA;AAmBA,4BAAA;AACA,YAAA,KADA;AAEA,eAAA,oBAAA;AACA,eAAA,EAAA;AACA;AAJA,KAnBA;AAyBA,eAAA;AACA,YAAA,MADA;AAEA,eAAA,oBAAA;AACA,eAAA;AACA,kBAAA,EADA;AAEA,kBAAA;AAFA,SAAA;AAIA;AAPA,KAzBA;AAkCA,yBAAA;AACA,YAAA,MADA;AAEA,eAAA;AAFA;AAlCA,GAFA;AAyCA,MAzCA,kBAyCA;AACA,WAAA;AACA,eAAA;AADA,KAAA;AAGA,GA7CA;AA8CA,WAAA;AACA;;;AAGA,aAJA,uBAIA;AACA,UAAA,0BAAA,KAAA,OAAA,CAAA;AACA,cAAA,GAAA,CAAA,cAAA,EAAA,KAAA,OAAA,EAAA,YAAA,EAAA,IAAA;AACA,WAAA,SAAA,CAAA,KAAA,SAAA,EACA,YADA,EAEA,KAAA,SAFA,EAGA,KAAA,YAHA;AAKA,KAZA;;AAaA;;;AAGA,iBAhBA,2BAgBA;AACA,UAAA,cAAA,IAAA,IAAA,GAAA,OAAA,GAAA,QAAA,EAAA;AACA,UAAA,YAAA,KAAA,YAAA,CAAA,CAAA,EAAA,WAAA,CAAA;AACA,WAAA,OAAA,iBAAA,SAAA;AACA,KApBA;AAqBA,gBArBA,wBAqBA,GArBA,EAqBA,GArBA,EAqBA;AACA,aAAA,KAAA,KAAA,CAAA,KAAA,MAAA,MAAA,MAAA,GAAA,GAAA,CAAA,CAAA,IAAA,GAAA;AACA;AAvBA,GA9CA;AAuEA,SAvEA,qBAuEA;AACA,SAAA,aAAA;AACA,SAAA,SAAA,CAAA,KAAA,SAAA;AACA;AA1EA,CAAA","sourcesContent":["<template>\n  <md-card>\n    <md-card-header class=\"card-chart\" :data-background-color=\"dataBackgroundColor\">\n      <div :id=\"chartId\" class=\"ct-chart\"></div>\n    </md-card-header>\n\n    <md-card-content>\n      <slot name=\"content\"></slot>\n    </md-card-content>\n\n    <md-card-actions md-alignment=\"left\">\n      <slot name=\"footer\"></slot>\n    </md-card-actions>\n  </md-card>\n</template>\n<script>\nexport default {\n  name: \"chart-card\",\n  props: {\n    footerText: {\n      type: String,\n      default: \"\"\n    },\n    headerTitle: {\n      type: String,\n      default: \"Chart title\"\n    },\n    chartType: {\n      type: String,\n      default: \"Line\" // Line | Pie | Bar\n    },\n    chartOptions: {\n      type: Object,\n      default: () => {\n        return {};\n      }\n    },\n    chartResponsiveOptions: {\n      type: Array,\n      default: () => {\n        return [];\n      }\n    },\n    chartData: {\n      type: Object,\n      default: () => {\n        return {\n          labels: [],\n          series: []\n        };\n      }\n    },\n    dataBackgroundColor: {\n      type: String,\n      default: \"green\"\n    }\n  },\n  data() {\n    return {\n      chartId: \"no-id\"\n    };\n  },\n  methods: {\n    /***\n     * Initializes the chart by merging the chart options sent via props and the default chart options\n     */\n    initChart() {\n      var chartIdQuery = `#${this.chartId}`;\n      console.log('chartIdQuery', this.chartId,chartIdQuery, this);\n      this.$Chartist[this.chartType](\n        chartIdQuery,\n        this.chartData,\n        this.chartOptions\n      );\n    },\n    /***\n     * Assigns a random id to the chart\n     */\n    updateChartId() {\n      var currentTime = new Date().getTime().toString();\n      var randomInt = this.getRandomInt(0, currentTime);\n      this.chartId = `div_${randomInt}`;\n    },\n    getRandomInt(min, max) {\n      return Math.floor(Math.random() * (max - min + 1)) + min;\n    }\n  },\n  mounted() {\n    this.updateChartId();\n    this.$nextTick(this.initChart);\n  }\n};\n</script>\n"],"sourceRoot":"src\\components\\Cards"}]}